modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
# 3. In the final model what would be the final model prediction for cases with the following variable values:
# Look at the output
# a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2       PS
# b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100       WS
# c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100        PS
# d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2              Not possible to predict
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
library(fancyRpartPlot)
install.packages("fancyRpartPlot"0)
install.packages("fancyRpartPlot")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
names(data)
names(newdata)
dim(newdata)
summary(olive)
dim(olive)
model <- Train(Area ~ ., data = olive)
library(caret)
model <- train(Area ~ ., data = olive)
model <- train(Area ~ ., data = olive, method = "rpart"")
model <- train(Area ~ ., data = olive, method = "rpart")
mode
model
predict(model, newdata = newdata)
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm")
model$finalmodel
model$finalModel
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(model, newdata = testSA))
predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
missClass(testSA, prediction)
model <- train(Area ~ ., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
m <- tree(Area ~ ., data = olive)
getModelInfo()
ls(getModelInfo(), pattern = "...")
getModelInfo(model = "...")
modelLookup(model = "...")
ls(getModelInfo(model = "...")
model <- train(Area ~ ., data = olive, method = "rf")
model <- train(Area ~ ., data = olive, method = "rf")
library(randomForest)
help(randomForest)
randomForest(Area ~ ., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
a <- randomForest(Area ~ ., data = olive)
predict(a, newdata = newdata)
tree()
tree(a)
model <- tree()
install.packages("rpart2")
model <- train(Area ~ ., data = olive, method = "rpart2")
model
predict(model, newdata = newdata)
missClass(testSA, prediction)
missClass(testSA$chd, prediction)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
prediction <- predict(model, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
y <- factor(vowel.train)
summary(vowel.train)
factor(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
model <- train(y ~ ., data = vowel.train, method = "rpart2)")
model <- train(y ~ ., data = vowel.train, method = "rpart2")
?train
?randomForest
?varImp
varImp(model)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
model <- train(y ~ ., data = vowel.train, method = "rf")
randomForest(y ~ ., data = vowel.train)
varImp(model)
randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train)
varImp(a)
varImp(a, useMode = "rf")
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(model)
order(b)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(wc14goals)
library(httr)
myapp = oauth_app("twitter", key = "youConsumerKeyHere", secret = "secret")
GET("https://api.twitch.tv/kraken/?oauth_token=TOKEN")
GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a = GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a
names(a)
a.url
a$url
a$conten
a$times
a$config
a = GET('https://api.twitch.tv/kraken/streams/ukazxcp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a.content
a$content
GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x <- GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x$content
?toJSON
library(JSON)
library(JSON2)
library(jsonlite)
fromJSON(x)
x
fromJSON(a)
a
x
fromJSON(x$content)
x$content
gc()
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
Question 2
# Consider the previous problem. Give the estimated odds ratio for autoloader
# use comparing head winds (numerator) to tail winds (denominator) adjusting for
# wind strength from the variable magn.
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windhead2)/exp(windtail2)
fit2
summary(fit2)
exp(fit2$coef[1])/exp(fit2coef[2])
exp(fit2$coef[1])/exp(fit2c$oef[2])
exp(fit2$coef[1])/exp(fit2$coef[2])
exp(windhead2)/exp(windtail2)
exp(windtail2)/exp(windhead2)
exp(windtail)/exp(windhead)
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
data(InsectSprays)
head(InsectSprays)
fit <- train(spray ~., method = "poisson", data = InsectSprays)
library(caret)
fit <- train(spray ~., method = "poisson", data = InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
fit
exp(fit$coef[1])/exp(fit$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- c(1:10, 13:22)
y <- numeric(20)
## Create first segment
y[1:10] <- 20:11 + rnorm(10, 0, 1.5)
## Create second segment
y[11:20] <- seq(11, 15, len=10) + rnorm(10, 0, 1.5)
## Plot it
par(mar=c(4,4,1,1)+0.2)
plot(x,y, ylim=c(5, 20), pch=16)
y
breaks <- x[which(x >= 9 & x <= 17)]
breaks
x
mse <- numeric(length(breaks))
for(i in 1:length(breaks)){
piecewise1 <- lm(y ~ x*(x < breaks[i]) + x*(x>=breaks[i]))
mse[i] <- summary(piecewise1)[6]
}
mse <- as.numeric(mse)
plot(mse)
mse
breaks
breaks[which(mse==min(mse))]
piecewise2 <- lm(y ~ x*(x < 15) + x*(x > 15))
summary(piecewise2)
plot(x,y, ylim=c(5, 20), pch=16)
curve((3.3133 + 16.6352) + (0.5843-1.3025)*x, add=T, from=1, to=15)
curve((3.3133 - 0.9116) + 0.5843*x, add=T, from=15, to=max(x))
abline(v=15, lty=3)
lin.mod <- lm(y~x)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
library(segmented)
install.packages("segmented")
library(segmented)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
segmented.mod
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lin.mod <- lm(y ~ x)
lin.mod
plot(x, y)
segmented.mod
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lin.mod <- lm(y ~ x)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=0)
segmented.mod
plit(x, y)
plot(x, y)
lin.mod
abline(lin.mod)
abline(segmented.mod, color = "red")
summary(segmented.mode)
summary(segmented.mod)
?abline
abline(-0.556, 2.09057)
plot(x, y)
plot(segmented.mod)
plot(x, y)
plot(segmented.mod, add = TRUE)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
plot(x,py)
plot(x)
plot(x, py)
lhs
gb
?ifelse
py
plot(x, y)
plot(x, y, add = TRUE)
y - py
py
warnings()
x - py
y - py
plot(gb, add=TRUE)
py
plot(lm(py ~ x), add = TRUE)
plot(x, y)
plot(lm(py ~ x), add = TRUE)
plot(x, y)
abline(lm(py ~ x), add = TRUE)
abline(py)
abline(py)
exp(windhead)/exp(windtail)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windhead)/exp(windtail)
exp(windtail)/exp(windhead)
plot(x, y)
lines(x, py)
gc()
pm0 <- read.table("RD_501_88101_1999-0.txt")
list.files()
setwd("~/GitHub/Data-Scientist-MOOC/4 - Exploratory Data Analysis/Air pollution case study")
pm0 <- read.table("./data/RD_501_88101_1999-0.txt")
pm0 <- read.table("./data/RD_501_88101_1999-0.txt", comment.char = "#",
header = FALSE, sep = "|", na.strings = "")
dim(dm0)
dim(pm0)
str(pm0)
head(pm0)
cnames <- readLines("RD_501_88101_1999-0.txt", 1)
cnames
cnames <- readLines("./data/RD_501_88101_1999-0.txt", 1)
cnames
cnames <- str.split(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- cnames
head(pm0)
names(pm0) <- cnames[[1]]
head(pm0)
names(pm0) <- make.names(pm0)
head(pm0)
names(pm0) <- make.names(cnames[[1]])
head(pm0)
x0 <- pm0$Sample.Value
x0
class(x0)
str(x0)
summary(x0)
mean(is.na(x0))
mean(is.na(x0))*100
pm1 <- read.table("./data/RD_501_88101_2012-0.txt", comment.char = "#",
header = FALSE, sep = "|", na.strings = "")
dim(pm1)
1.3 * 28
names(pm1) <- make.names(cnames[[1]])
head(pm10)
head(pm1)
x1 <- pm1$Sample.Value
summary(x1)
summary(x0)
mean(is.na(x1))*100
boxplot(x0, x1)
boxplot(log10(x0), log10(x1)
)
summary(x1)
summary(x0)
negative <- x1 < 0
str(negative)
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE) * 100
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), format = "%Y%m%d")
dates
hist(dates)
hist(dates, "month")
hist(dates[negative], "month")
site0 <- unique(subset(pm0, State.Code == 36, c(County.Code, Site.ID)))
site0
site1 <- unique(subset(pm1, State.Code == 36, c(County.Code, Site.ID)))
head(site0)
?unique
site0 <paste(site0[, 1], site0[, 2], sep = ".")
site0 <- paste(site0[, 1], site0[, 2], sep = ".")
site0 <- paste(site0[, 1], site0[, 2], sep = ".")
site1 <- paste(site1[, 1], site1[, 2], sep = ".")
head(site0)
str(site0)
dim(site0)
dim(site1)
length(site0)
length(site0)
length(site1)
both <- intersect(site0, site1)
both
pm0$count.site <- with(pm0, past(County.Code, Site.ID, sep = "."))
pm0$count.site <- with(pm0, paste(County.Code, Site.ID, sep = "."))
pm1$count.site <- with(pm1, paste(County.Code, Site.ID, sep = "."))
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
head(pm0)
pm0$count.site <- NULL
pm1$count.site <- NULL
pm0$county.site <- with(pm0, paste(County.Code, Site.ID, sep = "."))
pm1$county.site <- with(pm1, paste(County.Code, Site.ID, sep = "."))
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
head(cnt0)
split(cnt0, cnt0$count.site)
split(cnt0, cnt0$county.site)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm1sub <- subset(pm1, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
pm1sub
pm0sub <- subset(pm0, State.Code == 36 & County.Code == 63 & S
pm0sub <- subset(pm0, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(pm1, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(pm0, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(pm1, State.Code == 36 & County.Code == 63 & Site.ID == 2008)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
dim(pm0sub)
dim(pm1sub)
plot(dates1, x1sub)
dates1 <- pm1sub$Date
x1sub <- pm1sub$Sample.Value
plot(dates1, x1sub)
dates1 <- pm1sub$Date
dates1 <- as.Date(as.character(daets1), "%Y%m%d")
x1sub <- pm1sub$Sample.Value
plot(dates1, x1sub)
dates1 <- as.Date(as.character(dates1), "%Y%m%d")
plot(dates1, x1sub)
dates0 <- pm0sub$Date
dates0 <- as.Date(as.character(dates0), "%Y%m%d")
x0sub <- pm0sub$Sample.Value
plot(dates0, x0sub)
par(mfrow = c(1,2), mar= c(4, 4, 2, 1))
par(mfrow = c(1,2), mar= c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 2)
abline(h = median(x0sub, na.rm = TRUE))
par(mfrow = c(1,2), mar= c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE))
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE))
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
# plot the 2 graphs side by side again
par(mfrow = c(1,2), mar= c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20, ylim = rng)
abline(h = median(x0sub, na.rm = TRUE))
plot(dates1, x1sub, pch = 20, ylim = rng)
abline(h = median(x1sub, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na,rn = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0
summary(mn0)
summary(mn1)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn0)
d0
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1999, 52), mrg[, 2], xlim = c(1998, 2013)))
dim(mrg)
mn0
mn1
d0
d1
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
par(mfrow = c(1, 1))
with(mrg, plot(rep(1999, 52), mrg[, 2], xlim = c(1998, 2013)))
mrg
with(mrg, plot(rep(1999, 52), mrg[, 2], xlim = c(1998, 2013)))
with(mrg, plot(rep(1999, 53), mrg[, 2], xlim = c(1998, 2013)))
with(mrg, points(rep(2012, 53), mrg[, 3]))
segments(rep(1000, 52), mrg[, 2], rep(2012, 52), mrg[, 3])
par(mfrow = c(1, 1))
with(mrg, plot(rep(1999, 53), mrg[, 2], xlim = c(1998, 2013)))
with(mrg, points(rep(2012, 53), mrg[, 3]))
segments(rep(1000, 53), mrg[, 2], rep(2012, 53), mrg[, 3])
par(mfrow = c(1, 1))
with(mrg, plot(rep(1999, 53), mrg[, 2], xlim = c(1998, 2013)))
with(mrg, points(rep(2012, 53), mrg[, 3]))
segments(rep(1999, 53), mrg[, 2], rep(2012, 53), mrg[, 3])
