library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
set.seed(125)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
# 2. Set the seed to 125 and fit a CART model with the rpart method using all
# predictor variables and default caret settings.
modFit <- train(Case ~ ., data=training, method="rpart", TotalIntench2 = 23,000)
modFit$finalModel
modFit <- train(Case ~ ., data=train, method = "rpart", TotalIntench2 = 23,000)
modFit$finalModel
head(train)
names(train)
train$class
train$Class
train$TotalIntench2
train$TotalIntenCh2
modFit$finalModel
modFit
modFit <- train(Case ~ ., data=train, method = "rpart", TotalIntench2 = 23,000)
modFit <- train(Case ~ ., data=train, method = "rpart")
train
modFit <- train(Case ~ ., data = train, method = "rpart")
dim(train)
dim(test)
modFit <- train(Case ~ ., data = train, method = "rpart")
summary(train$Case)
summary(train$Class)
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
plot(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
install.packages("rattle")
predict(modFit, train)
library(rattle)
fancyRpartPlot(modFit$finalModel)
?fancy
?fancyR
?fancyRpart
help(rattle)
help(fancyRpartPlot)
fancyRpartPlot(modFit)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
install.packages(rattle)
set.seed(125)
# 1. Subset the data to a training set and testing set based on the Case variable in the data set.
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
# 2. Set the seed to 125 and fit a CART model with the rpart method using all
# predictor variables and default caret settings.
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
# 3. In the final model what would be the final model prediction for cases with the following variable values:
# Look at the output
# a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2       PS
# b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100       WS
# c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100        PS
# d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2              Not possible to predict
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
library(fancyRpartPlot)
install.packages("fancyRpartPlot"0)
install.packages("fancyRpartPlot")
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
names(data)
names(newdata)
dim(newdata)
summary(olive)
dim(olive)
model <- Train(Area ~ ., data = olive)
library(caret)
model <- train(Area ~ ., data = olive)
model <- train(Area ~ ., data = olive, method = "rpart"")
model <- train(Area ~ ., data = olive, method = "rpart")
mode
model
predict(model, newdata = newdata)
olive$Area
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm")
model$finalmodel
model$finalModel
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(model, newdata = testSA))
predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
missClass(testSA, prediction)
model <- train(Area ~ ., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
m <- tree(Area ~ ., data = olive)
getModelInfo()
ls(getModelInfo(), pattern = "...")
getModelInfo(model = "...")
modelLookup(model = "...")
ls(getModelInfo(model = "...")
model <- train(Area ~ ., data = olive, method = "rf")
model <- train(Area ~ ., data = olive, method = "rf")
library(randomForest)
help(randomForest)
randomForest(Area ~ ., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
a <- randomForest(Area ~ ., data = olive)
predict(a, newdata = newdata)
tree()
tree(a)
model <- tree()
install.packages("rpart2")
model <- train(Area ~ ., data = olive, method = "rpart2")
model
predict(model, newdata = newdata)
missClass(testSA, prediction)
missClass(testSA$chd, prediction)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
prediction <- predict(model, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
y <- factor(vowel.train)
summary(vowel.train)
factor(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
model <- train(y ~ ., data = vowel.train, method = "rpart2)")
model <- train(y ~ ., data = vowel.train, method = "rpart2")
?train
?randomForest
?varImp
varImp(model)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
model <- train(y ~ ., data = vowel.train, method = "rf")
randomForest(y ~ ., data = vowel.train)
varImp(model)
randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train)
varImp(a)
varImp(a, useMode = "rf")
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(model)
order(b)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(wc14goals)
library(httr)
myapp = oauth_app("twitter", key = "youConsumerKeyHere", secret = "secret")
GET("https://api.twitch.tv/kraken/?oauth_token=TOKEN")
GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a = GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a
names(a)
a.url
a$url
a$conten
a$times
a$config
a = GET('https://api.twitch.tv/kraken/streams/ukazxcp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a.content
a$content
GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x <- GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x$content
?toJSON
library(JSON)
library(JSON2)
library(jsonlite)
fromJSON(x)
x
fromJSON(a)
a
x
fromJSON(x$content)
x$content
gc()
