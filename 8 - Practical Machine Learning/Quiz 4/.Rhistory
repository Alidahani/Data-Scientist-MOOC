data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm")
model$finalmodel
model$finalModel
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA, predict(model, newdata = testSA))
predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
prediction <- predict(model, newdata = testSA)
missClass(testSA, prediction)
model <- train(Area ~ ., data = olive, method = "rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model, newdata = newdata)
m <- tree(Area ~ ., data = olive)
getModelInfo()
ls(getModelInfo(), pattern = "...")
getModelInfo(model = "...")
modelLookup(model = "...")
ls(getModelInfo(model = "...")
model <- train(Area ~ ., data = olive, method = "rf")
model <- train(Area ~ ., data = olive, method = "rf")
library(randomForest)
help(randomForest)
randomForest(Area ~ ., data = olive)
newdata = as.data.frame(t(colMeans(olive)))
a <- randomForest(Area ~ ., data = olive)
predict(a, newdata = newdata)
tree()
tree(a)
model <- tree()
install.packages("rpart2")
model <- train(Area ~ ., data = olive, method = "rpart2")
model
predict(model, newdata = newdata)
missClass(testSA, prediction)
missClass(testSA$chd, prediction)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as the
# outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
model <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data = trainSA, method = "glm", family = "binomial")
prediction <- predict(model, newdata = testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
missClass(trainSA$chd, predict(model, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
y <- factor(vowel.train)
summary(vowel.train)
factor(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
model <- train(y ~ ., data = vowel.train, method = "rpart2)")
model <- train(y ~ ., data = vowel.train, method = "rpart2")
?train
?randomForest
?varImp
varImp(model)
model <- train(y ~ ., data = vowel.train, method = "rf")
varImp(model)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
model <- train(y ~ ., data = vowel.train, method = "rf")
randomForest(y ~ ., data = vowel.train)
varImp(model)
randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train)
varImp(a)
varImp(a, useMode = "rf")
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(a)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
varImp(model)
order(b)
set.seed(33833)
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
library(wc14goals)
library(httr)
myapp = oauth_app("twitter", key = "youConsumerKeyHere", secret = "secret")
GET("https://api.twitch.tv/kraken/?oauth_token=TOKEN")
GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a = GET('https://api.twitch.tv/kraken/streams/ukiyojp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a
names(a)
a.url
a$url
a$conten
a$times
a$config
a = GET('https://api.twitch.tv/kraken/streams/ukazxcp?client_id=7y7syvf1y5yvuv8iy93nes5cl175m2q')
a.content
a$content
GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x <- GET("https://api.twitch.tv/kraken/channels/cosmowright/follows/?limit=100")
x$content
?toJSON
library(JSON)
library(JSON2)
library(jsonlite)
fromJSON(x)
x
fromJSON(a)
a
x
fromJSON(x$content)
x$content
gc()
gc()
library(MASS)
data(shuttle)
head(shuttle)
summary(shuttle$use)
fit <- lm(auto ~., data = shuttle)
fit <- lm(use ~., data = shuttle)
fit
fit <- lm(use ~ wind, data = shuttle)
fit <- lm(factor(use) ~ wind, data = shuttle)
?glm
factor(shuttle$use)
factor(shuttle$use, c(1, 0))
?factor
factor(shuttle$use, levels = c(1, 0))
factor(shuttle$use, levels = c(1, 0), labels = levels)
factor(shuttle$use, levels = c(1, 0), labels = c(1, 0))
factor(shuttle$use)
contrast(factor(shuttle$use))
contrasts(factor(shuttle$use))
fit <- lm(contrasts(factor(use)) ~ wind, data = shuttle)
?glm
fit <- llm(contrasts(factor(use)) ~ wind, data = shuttle, family = "binomial")
fit <- glm(contrasts(factor(use)) ~ wind, data = shuttle, family = "binomial")
fit <- glm(contrasts(factor(use)) ~ contrasts(factor(wind)), data = shuttle, family = "binomial")
contrasts(factor(use))
contrasts(factor(shuttle$use))
contrasts(factor(shuttle$wind))
fit <- glm((factor(use)) ~ (factor(wind)), data = shuttle, family = "binomial")
fit
as.numeric(factor(shuttle$use))
?factor
as.factor(shuttle$use)
shuttle$use
factor(shuttle$use, levels = (0, 1))
factor(shuttle$use, levels = c(0, 1))
factor(shuttle$use, levels = c("auto", "noauto"))
factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit <- glm(use ~ (factor(wind)), data = shuttle, family = "binomial")
fit
1/-0.03181
fit <- glm(use ~ (factor(wind)) - 1, data = shuttle, family = "binomial")
fit
fit <- glm(use ~ (factor(wind)), data = shuttle, family = "binomial")
fit
shuttle$use
exp(-0.251)
summary(fit)
exp(-0.25131)
(-0.2531/-0.03181)
fit <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit)
(-0.2531/-0.03181)
exp(7.956617)
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ raveScore, data = ravenData, family = "binomial")
mdl <- glm(ravenWinNum ~ ravenScore, data = ravenData, family = "binomial")
lodds <- predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
lodds <- predict(mdl, data.frame(ravenScore = 0)
exp(lodds)/(1+exp(lodds))
lodds <- predict(mdl, data.frame(ravenScore = 0))
exp(lodds)/(1+exp(lodds))
lodds <- predict(mdl, data.frame(ravenScore = 0))
exp(lodds)/(1+exp(lodds))
lodds <- predict(fit, data.frame(ravenScore = 0))
exp(lodds)/(1+exp(lodds))
lodds <- predict(fit, data.frame(use = 0))
exp(lodds)/(1+exp(lodds))
lodds <- predict(fit, data.frame(use = 0))
lodds <- predict(fit, data.frame(use = 0, wind = 0))
exp(lodds)/(1+exp(lodds))
u
fit
exp(-0.25131)/(1+exp(-0.2831))
fit <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
fit$coef
fit$coef$windead
fit$coef[0]
fit$coef[1]
windhead <- fit$coef[1]
windhead <- fit$coef[1]
windtial <- fit$coef[2]
exp(windhead)/(1+exp(windead))
exp(windhead)/(1+exp(windhead))
windtaill <- fit$coef[2]
exp(windhead)/(1+exp(windtail))
windtail <- fit$coef[2]
exp(windhead)/(1+exp(windtail))
exp(windhead)
summary(fit)
windhead
windtail
exp(windhead)/(1+exp(windtail))
plot(fit)
exp(fit$coef)
.778/(1+.75)
?shuttle
shuttle
fit <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
gc()
head(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
library(randomForest)
fit1 <- train(y ~ ., data = vowel.train, method = "rf")
library(randomForest)
library(caret)
fit1 <- train(y ~ ., data = vowel.train, method = "rf")
?train
fit2 <- train(y ~ ., data = vowel.train, method = "gbm")
gc()
summary(fit1)
summary(fit2)
predict1 <- predict(fit1, newdata = vowel.test)
predict2 <- predict(fit2, newdata = vowel.test)
c1 <- confusionMatrix(predict1, vowel.test)
c1 <- confusionMatrix(predict1, vowel.test$y)
c1
c2 <- confusionMatrix(predict2, vowel.test$y)
c2
fit1 <- train(y ~ ., data = vowel.train, method = "rf", trControl = trainControl(number = 4))
predict1 <- predict(fit1, newdata = vowel.test)
c1 <- confusionMatrix(predict1, vowel.test$y)
c1
c1
c2
DF_combined <- data.frame(predict1, predict2, vowel.test$y)
fit_combined <- train(y ~ ., data = DF_combined, method = "gam")
DF_combined <- data.frame(predict1, predict2, vowel.test$y)
DF_combined
fit_combined <- train(y ~ ., data = DF_combined, method = "gam")
names(voewl.test)
names(vowel.test)
fit_combined <- train(y ~ ., data = DF_combined, method = "gam")
names(voewl.train)
names(vowel.test)
names(DF_combined)
fit_combined <- train(vowel.test.y ~ ., data = DF_combined, method = "gam")
predict3 <- predict(fit_combined, newdata = vowel.test)
c3 <- confusionMatrix(predict3, vowel.test$y)
c3
c3 <- confusionMatrix(predict3, DF_combined$y)
DF_combined <- data.frame(predict1, predict2, y = vowel.test$y)
fit_combined <- train(y ~ ., data = DF_combined, method = "gam")
predict3 <- predict(fit_combined, newdata = vowel.test)
c3 <- confusionMatrix(predict3, DF_combined$y)
c3
DF_combined <- data.frame(predict1, predict2, y = vowel.test$y)
fit_combined <- train(y ~ ., data = DF_combined, method = "gam")
predict3 <- predict(fit_combined, newdata = vowel.test)
c3 <- confusionMatrix(predict3, DF_combined)
c3
fit1
summary(fit1)
head(inTrain)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
fit1 <- (diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- (diagnosis ~ ., data = training, method = "gbm")
fit3 <- (diagnosis ~ ., data = training, method = "lda")
fit1 <- train(diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(diagnosis ~ ., data = training, method = "gbm")
fit3 <- train(diagnosis ~ ., data = training, method = "lda")
fit1
fit2
predict1 <- predict(fit1, newdata = vowel.test)
predict2 <- predict(fit2, newdata = vowel.test)
predict3 <- predict(fit3, newdata = vowel.test)
predict1 <- predict(fit1, newdata = testing)
predict2 <- predict(fit2, newdata = testing)
predict3 <- predict(fit3, newdata = testing)
DF_combined <- data.frame(predict1, predict2, predict3, y = testing$diagnosis)
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf", trControl = trainControl(number = 4))
predict4 <- predict(fit_combined, newdata = testing)
length(predict1)
length(predict2)
length(predict3)
DF_combined <- data.frame(predict1, predict2, predict3, y = training$diagnosis)
length(vowel.train$y)
length(vowel.test$y)
DF_combined <- data.frame(predict1, predict2, predict3, y = testing$diagnosis)
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf", trControl = trainControl(number = 4))
head(DF_combined)
tail(DF_combined)
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
summary(DF_combined)
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = testing$diagnosis)
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
predict4 <- predict(fit_combined, newdata = testing)
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c3 <- confusionMatrix(predict4, testing$diagnosis)
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c4 <- confusionMatrix(predict4, testing$diagnosis)
c1
c2
c3
c4
names$c4
names(c4)
c4$table
c4$positive
c4$overall
c4$overall[1]
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
set.seed(62433)
# create models
fit1 <- train(diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(diagnosis ~ ., data = training, method = "gbm")
fit3 <- train(diagnosis ~ ., data = training, method = "lda")
# predict test
predict1 <- predict(fit1, newdata = testing)
predict2 <- predict(fit2, newdata = testing)
predict3 <- predict(fit3, newdata = testing)
# combine predictions
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = testing$diagnosis)
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
predict4 <- predict(fit_combined, newdata = testing)
# confusion matrixes
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c4 <- confusionMatrix(predict4, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
?lasso
library(lassO)
library(caret)
lassO/
?lasso
?train
set.seed(233)
names(training)
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
fit <- train(CompressiveStrength ~ ., data = training, method = "lasso")
fit
?plot.enet
plot(fit)
plot(fit, use.color = TRUE)
summary(fit)
names(training)
plot(fit, xvar = fraction,  use.color = TRUE)
plot(fit, xvar = "fraction",  use.color = TRUE)
plot(fit, xvar = c("fraction", "penalty", "L1norm", "step"),  use.color = TRUE)
fit
summary(fit)
names(fit)
fit$results
plot(fit, xvar = "penalty",  use.color = TRUE)
plot(fit, xvar = "penalty")
plot.enet(fit$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(fit, xvar = "penalty", use.color = TRUE)
plot.enet(fit, xvar = "penalty", use.color = TRUE)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
setwd("~/GitHub/Data-Scientist-MOOC/8 - Practical Machine Learning/Quiz 4")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
names(training)
?bats
install.packages("forecast")
library(forecast)
?bats
bats(training)
head(training)
forecast(training)
?forecast
class(training$date)
mTumb <- to.monthly(training)
?op
?Op
library(quantmod)
mTumb <- to.monthly(training)
?to.monthly
?to.monthly(training$date)
head(training)
mTumb <- to.monthly(training)
mTumb <- to.monthly(training$date)
testing = dat[(year(dat$date)) > 2011,]
mTumb <- to.monthly(training$date)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mTumb <- to.monthly(training$date)
names(training)
mTumb <- to.monthly(training$date#)
to.monthly(trainign)
to.monthly(training)
ts(training)
bats(ts(training))
ts(training)
head(ts(training))
head(training)
head(ts(to.daily(training))
)
to.monthly(training)
bats(tstrain)
?bats
bats(tstrain)
head(training)
head(tstrain)
fit <- bats(tstrain)
fit <- bats(tstrain)
forecast(fit)
?forecast
forecast(fit, level = 95)
length(forecast(fit, level = 95))
forecast(fit, level = 95)
summary(fit)
names(fit)
length(tstrain)
forecast(fit, level = 95, h = 235)
length(forecast(fit, level = 95, h = 235))
a <- forecast(fit, level = 95, h = 235)
length(a)
length(a$Forecast)
names(a)
a$model
a$upper
length(a$upper)
235/365
gc()
