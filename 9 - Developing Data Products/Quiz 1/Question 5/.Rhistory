table(predictedSpam)
table(testSpam$type)
?table()
x <- 1:4
v
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
p
mean <- 1.0 * .1 + 2.0 * .2 + 3.0 * .3 + 4.0 * .4
mean
install.packages("UsingR")
hist(galton$parent,col = "blue", breaks = 100)
library(UsingR); data(galton)
library(UsingR); data(galton)
par(mfrow=c(1, 2))
hist(galton$child,col = "blue", breaks = 100)
hist(galton$parent,col = "blue", breaks = 100)
library(UsingR); data(galton)
library(UsingR); data(galton)
par(mfrow=c(1, 2))
hist(galton$child,col = "blue", breaks = 100)
hist(galton$parent,col = "blue", breaks = 100)
library(UsingR); data(galton)
par(mfrow=c(1, 2))
hist(galton$child,col = "blue", breaks = 100)
hist(galton$parent,col = "blue", breaks = 100)
for (i in mew){
print mew[i]
}
for (i in mew){
print(mew[i])
}
mew <- c(1.077, 0.300, 0.0025, 0.1471)
for (i in mew){
print(mew[i])
}
for (each in mew){
print(each)
}
for (each in mew){
print(each)
for (i in 1:4){
print(w[i](x[i]-each)**2)
}
}
w <- c(2, 1, 3, 1)
x <- c(0.18, -1.54, 0.42, 0.95)
for (each in mew){
print(each)
for (i in 1:4){
print(w[i](x[i]-each)**2)
}
}
w[i](x[i]-each)**2
w[i]
x[i]
each
w[i](x[i]-each)
w[i]*(x[i]-each)
for (each in mew){
print(each)
for (i in 1:4){
print(w[i]*(x[i]-each)**2)
}
}
for (each in mew){
# print(each)
for (i in 1:4){
print(w[i]*(x[i]-each)**2)
}
}
for (each in mew){
# print(each)
for (i in 1:4){
print(w[i]*(x[i]-each)**2)
}
}
i
for (each in mew){
# print(each)
for (i in 1:4){
print("x = ", x[i], "w = ", w[i], w[i]*(x[i]-each)**2)
}
}
for (each in mew){
# print(each)
for (i in 1:4){
print("x = " + x[i] +  "w = " +  w[i] + w[i]*(x[i]-each)**2)
}
}
for (each in mew){
#print(each)
print(x[i])
print(w[i])
for (i in 1:4){
print(w[i]*(x[i]-each)**2)
}
}
for (each in mew){
#print(each)
print(x[i])
print(w[i])
for (i in 1:4){
print(i)
#print(w[i]*(x[i]-each)**2)
}
}
for (each in mew){
#print(each)
#print(x[i])
#print(w[i])
for (i in 1:4){
print(i)
#print(w[i]*(x[i]-each)**2)
}
}
for (each in mew){
total <- 0
#print(each)
#print(x[i])
#print(w[i])
for (i in 1:4){
# print(i)
total +=w[i]*(x[i]-each)**2
#print(w[i]*(x[i]-each)**2)
}
print(total)
}
for (each in mew){
total <- 0
#print(each)
#print(x[i])
#print(w[i])
for (i in 1:4){
#print(i)
total +=w[i]*(x[i]-each)**2
#print(w[i]*(x[i]-each)**2)
}
print(total)
}
for (each in mew){
total <- 0
#print(each)
#print(x[i])
#print(w[i])
for (i in 1:4){
total +=w[i]*(x[i]-each)**2
}
print(total)
}
for (each in mew){
total <- 0
#print(each)
#print(x[i])
#print(w[i])
for (i in 1:4){
total = total + w[i]*(x[i]-each)**2
}
print(total)
}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
freqData <- as.data.frame(table(x, y))
freqData
freqData <- data.frame(x, y)
freqData
data_ <- data.frame(x, y)
lm (y ~ x-1)
data(mtcars)
names(mtcars)
lm(y ~ x-1)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
lm(y ~ x-1)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
lm(x ~ y-1)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
lm(x ~ y)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
lm(y ~ x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
mean(x)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
mean(x)
x[1]
x[1] - mean(x)
xc <- x - mean(x)
cx
cx
xc
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
xc <- x - mean(x)
xc <- xc/1
xc
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
xc <- x - mean(x)
xc <- xc/sum(xc^2)
xc
xc[1]**2
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
xc <- x - mean(x) / (sum(xc^2))
xc
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
xc <- (x - mean(x))/ (sum(xc^2))
xc
x
2^2
xc <- (x - mean(x))/ (sum(x^2))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
xc <- (x - mean(x))/ (sum(x^2))
xc
rho(1.5, 1.6)
cor(1.5, 1.6)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
# What is the value of the first measurement if x were normalized
# (to have mean 0 and variance 1)?
xc <- (x - mean(x))/ sd(x)
xc
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x2 <- x^2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
xmean <- mean(x)
sum(x-xmean)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
xmean <- mean(x)
sum((x-xmean)^2)
xmean
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
xmean <- mean(x)
sum((x-xmean)^2)
sum((x-.573)^2)
xmean <- mean(x)
heads(faithful)
data(faithful)
heads(faithful)
faithful
cor(faithful$eruptions, faithful$waiting)
install.packages("shiny")
library(shiny)
getwd()
setwd("C:\Users\Chris\Documents\GitHub\Data-Scientist-MOOC")
getwd()
setwd("C:/Users/Chris/Documents/GitHub/Data-Scientist-MOOC")
a <- list.files()
a
setwd(a[9])
list.files()
a <- list.files()
setwd(a[1])
runApp()
getwd()
setwd("../")
a <- list.files()
a
setwd(a[1])
getwd()
runApp()
require(rCharts)
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
require(devtools)
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, sex == "Male")
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart",
data = subset(haireye, sex == "Male")
)require(rCharts)
haireye
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart",
data = subset(haireye, Sex == "Male"))
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart",
data = subset(haireye, Sex == "Male"))
n1$save('fig/n1/html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart",
data = subset(haireye, Sex == "Male"))
n1$save('fig/n1.html', cdn = TRUE)
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
})
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
})
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
)
graph_chart1.addHandler(function(type, e){
var data = e.evtData;
if (type === 'click'){
return alert("You clicked on car with mpg: " + data.mpg.in[0]);
}
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
## Example 2 Facetted Barplot
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(Sepa
library()
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('fig/r1.html', cdn = TRUE)
cat('<frame src="fig/r1.html" width=100%, height = 600></iframe>')
r1$save('r1.html', cdn = TRUE)
names(iris) = gsub("\\.", "", names(iris))
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1$save('r1.html', cdn = TRUE)
cat('<frame src="r1.html" width=100%, height = 600></iframe>')
getwd()
setwd("../")
r1$print(r1)
r1
r1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
r1
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart"")
)
""
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart)
)
""
""
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
g
M
print(M)
demo(googleVis)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='strout', token='A80F7EF5BB8B04964B46A84F7B3AA57C', secret='i1q26P+NIliKU7yoJ8zLep1h5KYP+w7nXqPvrfiE')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
getwd()
list.files()
setwd(list.files()[2])
list.files()
deployApp()
library(shiny)
library(apps)
runApp()
setwd("../")
list.files()
setwd(list.files()[1])
runApp()
deplotApp()
deployApp()
library(shinyapps)
deployApp()
deployApp("Child height MSE")
getwd()
list.files()
deployApp(Child height MSE)
setwd(0)
getwd()
setwd("../")
list.files()
deployApp("First Shiny App")
setwd("First Shiny App")
list.files()
deployApp("First Shiny App")
deployApp(First Shiny App)
deployApp()
deployApp(a)
list.files()
deployApp("First")
?deployApp
deployApp(appName="First Shiny App")
list.files()
setwd("~/GitHub/Data-Scientist-MOOC/9 - Developing Data Products/First Shiny App")
deployApp()
deployApp(appName="First")
deployApp(appName="First")
install_github("ropensci/plotly")
library(plotly)
set_credentials_file("strOut", "bg40gafyfz")
load("courseraData.rda")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
print(myPlot)
myPlot
plot(myPlot)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
plot(myPlot)
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
list.files9)
list.files()
list.files()
runApp()
list.files()
getwd()
setwd("../")
getwd()
list.files()
setwd("Quiz1")
setwd("Quiz 1")
list.files()
setwd("Question 5")
runApp()
library(lattic)
library(lattie)
library(lattice)
