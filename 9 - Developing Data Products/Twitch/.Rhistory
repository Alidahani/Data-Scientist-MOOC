Question 2
# Consider the previous problem. Give the estimated odds ratio for autoloader
# use comparing head winds (numerator) to tail winds (denominator) adjusting for
# wind strength from the variable magn.
fit2 <- glm(use ~ wind + magn - 1, data = shuttle, family = "binomial")
summary(fit)
windhead2 <- fit2$coef[1]
windtail2 <- fit2$coef[2]
exp(windhead2)/exp(windtail2)
fit2
summary(fit2)
exp(fit2$coef[1])/exp(fit2coef[2])
exp(fit2$coef[1])/exp(fit2c$oef[2])
exp(fit2$coef[1])/exp(fit2$coef[2])
exp(windhead2)/exp(windtail2)
exp(windtail2)/exp(windhead2)
exp(windtail)/exp(windhead)
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
data(InsectSprays)
head(InsectSprays)
fit <- train(spray ~., method = "poisson", data = InsectSprays)
library(caret)
fit <- train(spray ~., method = "poisson", data = InsectSprays)
fit <- glm(count ~ spray  - 1, family = "poisson", data = InsectSprays)
fit
exp(fit$coef[1])/exp(fit$coef[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
x <- c(1:10, 13:22)
y <- numeric(20)
## Create first segment
y[1:10] <- 20:11 + rnorm(10, 0, 1.5)
## Create second segment
y[11:20] <- seq(11, 15, len=10) + rnorm(10, 0, 1.5)
## Plot it
par(mar=c(4,4,1,1)+0.2)
plot(x,y, ylim=c(5, 20), pch=16)
y
breaks <- x[which(x >= 9 & x <= 17)]
breaks
x
mse <- numeric(length(breaks))
for(i in 1:length(breaks)){
piecewise1 <- lm(y ~ x*(x < breaks[i]) + x*(x>=breaks[i]))
mse[i] <- summary(piecewise1)[6]
}
mse <- as.numeric(mse)
plot(mse)
mse
breaks
breaks[which(mse==min(mse))]
piecewise2 <- lm(y ~ x*(x < 15) + x*(x > 15))
summary(piecewise2)
plot(x,y, ylim=c(5, 20), pch=16)
curve((3.3133 + 16.6352) + (0.5843-1.3025)*x, add=T, from=1, to=15)
curve((3.3133 - 0.9116) + 0.5843*x, add=T, from=15, to=max(x))
abline(v=15, lty=3)
lin.mod <- lm(y~x)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
library(segmented)
install.packages("segmented")
library(segmented)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
segmented.mod
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lin.mod <- lm(y ~ x)
lin.mod
plot(x, y)
segmented.mod
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lin.mod <- lm(y ~ x)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=14)
segmented.mod <- segmented(lin.mod, seg.Z = ~x, psi=0)
segmented.mod
plit(x, y)
plot(x, y)
lin.mod
abline(lin.mod)
abline(segmented.mod, color = "red")
summary(segmented.mode)
summary(segmented.mod)
?abline
abline(-0.556, 2.09057)
plot(x, y)
plot(segmented.mod)
plot(x, y)
plot(segmented.mod, add = TRUE)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
lhs <- function(x) ifelse(x < 0,0-x,0) # basis function 1 (lhs = left hockey stick)
rhs <- function(x) ifelse(x > 0,x-0,0) # basis function 2 (rhs = right hockey stick)
gb <- lm(y ~ lhs(x) + rhs(x))
x <- seq(-5,5,by=1)
py <- gb$coef[1]+gb$coef[2]*lhs(x)+gb$coef[3]*rhs(x)
plot(x,py)
plot(x)
plot(x, py)
lhs
gb
?ifelse
py
plot(x, y)
plot(x, y, add = TRUE)
y - py
py
warnings()
x - py
y - py
plot(gb, add=TRUE)
py
plot(lm(py ~ x), add = TRUE)
plot(x, y)
plot(lm(py ~ x), add = TRUE)
plot(x, y)
abline(lm(py ~ x), add = TRUE)
abline(py)
abline(py)
exp(windhead)/exp(windtail)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windhead)/exp(windtail)
exp(windtail)/exp(windhead)
plot(x, y)
lines(x, py)
gc()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){})
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h = median(Time), lty = 2)
})
xyplot(weight ~ Time | Diet)
library(nlme)
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h = median(Time), lty = 2)
})
library(lattice)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, panel = function(weight, Time, ...){
panel.xyplot(weight, Time, ...)
panel.abline(h = median(Time), lty = 2)
})
xyplot(weight ~ Time | Diet, panel = function(x, y, ...){
panel.xyplot(x, y, ...)
panel.abline(h = median(y), lty = 2)
})
?llines
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
?trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
?lpoints?
?lpoints
source("http://www.openintro.org/stat/data/present.R")
head(present)
dim(present)
63 * 3
View(present)
present$boys
plot(x = present$year, y = present$girls)
plot(x = present$year, y = present$girls, type = "l")
plot(present$year, present$boys + present$girls, type = "l")
max( present$boys + present$girls)
sort( present$boys + present$girls)
DF <- data.frame(present$Year,  present$boys + present$girls)
dim(present$year)
present$year
present$Year
DF <- data.frame(present$year,  present$boys + present$girls)
DF
sort(DF)
sort(DF,  present$boys + present$girls)
names(DF) <- c("Year", "Births")
sort(DF, Births)
sort(DF, DF$Births)
?sort
?sorted
a <- DF[with(DF, order(Birth))]
a <- DF[with(DF, order(Births))]
a
names(DF)
?order
?order
DF[order(DF)]
sort(DF)
DF[order(-Birth)]
DF[order(-DF$Birth)]
DF[order(-DF$Birth, DF$Year)]
DF[order(Birth, Year)]
DF[order(Births, Year)]
names(DF)
sort(DF, by = ~ -Birth)
DF
sort(DF, by = ~ -Birth)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"),
levels = c("Low", "Med", "Hi"), ordered = TRUE),
x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9),
z = c(1, 1, 1, 2))
z
head(dd)
R> dd[with(dd, order(-z, b)), ]
dd[with(dd, order(-z, b)), ]
z
b
DF[with(DF, order(-Births, Year)), ]
DF[[1]]
DF[1, ]
DF <- DF[with(DF, order(-Births, Year)), ]
DF[1, ]
present$boys/present$girls
present$boys/(present$boys + present$girls)
plot(present$year, present$boys, type = "l")
, type = "l")
plot(present$year, present$boys/(present$boys + present$girls)
, type = "l")
present$boys/(present$boys + present$girls)
present$boys > present$girls
plot(present$year, present$boys/present$girls), type = "l")
plot(present$year, present$boys/present$girls, type = "l")
present$boys-present$girls
DF1 <- data.frame(present$year, diff <- present$boys-present$girls)
DF1
DF1 <- data.frame(present$year,  present$boys-present$girls)
DF1 <- data.frame(present$year,  present$boys-present$girls)
names(DF) <- c("Year", "Difference")
head(DF1)
names(DF) <- c("Year", "Births")
names(DF1) <- c("Year", "Difference")
head(DF1)
DF1 <- DF1[with(DF1, order(-Difference)), ]
DF1
load(url("http://www.openintro.org/stat/data/kobe.RData"))
head(kobe)
kobe_streak <- calc_streak(kobe$basket)
barplot(table(kobe_streak))
plot(kobe_streak)
kobe_streak
hist(kobe_streak)
boxplot(kobe_streak)
boxplot(kobe_streak)
outcomes <- c("heads", "tails")
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sample(outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(outcomes, size = 100, replace = TRUE, prob = c(0.2, 0.8))
table(sim_unfair_coin)
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
a <- sample(outcomes, size = 100, replace = TRUE, prob = c(.45, .55))
a
table(a)
kobe$basket
sim_basket
sim.basket. <- sample(outcomes, size = 100, replace = TRUE, prob = c(.45, .55))
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(.45, .55))
summary(sum_basket)
summary(sim_basket)
summary(kobe$basket)
calc_streak(sim_basket)
sim_basket
streaks <- calc_streak(sim_basket)
boxplot(streaks)
barplot(streaks)
par(mfrow = c(1, 2))
barplot(kobe_streak)
barplot(streaks)
barplot(table(kobe_streak))
par(mfrow = c(1, 2))
barplot(table(kobe_streak)
barplot(table(streaks))
par(mfrow = c(1, 2))
barplot(table(kobe_streak))
barplot(table(streaks))
table(kobe_streak)
dbinom(92, size = 100, p = 0.9)
?choose
choose(3000000, 35)
2^3
choose(n, l) * (p^k) * ((p-1)^(k-1))
n <- 3000000
p <- 0.00001
k <- 35
choose(n, l) * (p^k) * ((p-1)^(k-1))
n <- 3000000
p <- 0.00001
k <- 35
choose(n, k) * (p^k) * ((p-1)^(k-1))
dbinom(k, size = n, p = p)
choose(n, k) * (p^k) * ((1-p)^(n-k))
sum(dbinom(k:n, size = n, p = p))
?lm
?colSums
setwd("~/GitHub/Data-Scientist-MOOC/9 - Developing Data Products/Intro to Shiny")
runApp()
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
# label, printed label, default values, step values
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date:")
),
mainPanel(
h3('Illustrating outputs'),
h4('You entered'),
verbatimTextOutput("oid1"),
h4('You entered'),
verbatimTextOutput("oid2"),
h4('You entered'),
verbatimTextOutput("odate")
)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Illustrating inputs"),
sidebarPanel(
# label, printed label, default values, step values
numericInput('id1', 'Numeric input, labeled id1', 0, min = 0, max = 10, step = 1),
checkboxGroupInput("id2", "Checkbox",
c("Value 1" = "1",
"Value 2" = "2",
"Value 3" = "3")),
dateInput("date", "Date:")
),
mainPanel(
h3('Illustrating outputs'),
h4('You entered'),
verbatimTextOutput("oid1"),
h4('You entered'),
verbatimTextOutput("oid2"),
h4('You entered'),
verbatimTextOutput("odate")
)
))
library(shiny)
shinyServer(
function(input, output) {
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$odate <- renderPrint({input$date})
}
)
runApp()
setwd("~/GitHub/Data-Scientist-MOOC/9 - Developing Data Products/Diabetes predictor")
runApp()
runApp()
mean_values = 10
x <- seq(min(mean_values ), max(mean_values ), length = 100)
y <- dnorm(x, mean = avg, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
x <- seq(1:50, length = 100)
x
x <- seq(1, 50, length = 100)
x
x <- seq(1, 50, length = 100)
y <- dnorm(x, mean = 0, sd = s)
curve(dnorm(x, mean = avg, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
x <- seq(1, 50, length = 100)
y <- dnorm(x, mean = 0, sd = s)
curve(dnorm(x, mean = 0, sd = s),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
x <- seq(1, 50, length = 100)
y <- dnorm(x, mean = 0, sd = s)
y <- dnorm(x, mean = 0, sd = 5)
curve(dnorm(x, mean = 0, sd = 5),
col = "gray", lwd = 3, lty = 3, add = TRUE)
plot()
x <- seq(1, 50, length = 100)
y <- dnorm(x, mean = 0, sd = 5)
plot(x, y)
curve(dnorm(x, mean = 0, sd = 5),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
x <- seq(-50, 50, length = 100)
y <- dnorm(x, mean = 0, sd = 5)
plot(x, y)
curve(dnorm(x, mean = 0, sd = 5),
col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
plot(x, y, type = "l")
plot(x, y, type = "l", col = "blue")
mean <- 10
sd <- 5
# plot the theoretical normal distribution for the data set
x <- seq(0, mean, length = 100)
y <- dnorm(x, mean = mean, sd = sd)
plot(x, y, type = "l")
x
y
?plot
summary(x)
summary(y)
plot(x, y)
mean <- 10
sd <- 5
# plot the theoretical normal distribution for the data set
x <- seq(0, mean*2, length = 100)
y <- dnorm(x, mean = mean, sd = sd)
plot(x, y, type = "l")
mean <- 10
sd <- 1
# plot the theoretical normal distribution for the data set
x <- seq(0, mean*2, length = 100)
y <- dnorm(x, mean = mean, sd = sd)
plot(x, y, type = "l")
# curve(dnorm(x, mean = 0, sd = 5),
#       col = "gray", lwd = 3, lty = 3, add = TRUE)
legend('topright', c("Expected value", "Actual mean", "Normal distrubution"),
lty=1, col=c('red', 'steelblue', "gray"), bty='n', cex=.75)
obs <- 5
pnorm(obs, mean = mean, sd = sd)
obs <- 6
pnorm(obs, mean = mean, sd = sd)
runApp()
list.files()
getwd()
setwd("~/GitHub/Data-Scientist-MOOC/9 - Developing Data Products/project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(0)
runApp()
mean
sd
y
runApp()
plot(x)
plot(x)
runApp()
runApp()
runApp()
runApp(0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
