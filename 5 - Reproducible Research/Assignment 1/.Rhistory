x=list(at = seq(0, 250, by= 50), limits = c(0, 300)),
y=list(limits = c(0, 210))
)
# plot the time series
xyplot(average_steps ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
df_steps_interval <- data.frame(interval_factor, average_steps)
summary(df_steps_interval)
head(df_steps_interval)
interval_factor[100]
scales=list(
x=list(at = seq(0, 250, by= 50), limits = c(0, 300)),
y=list(limits = c(0, 800))
)
# plot the time series
xyplot(average_steps ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
interval_factor
average_steps
average_steps <- sapply(average_steps, simplify = array, round, 2)
average_steps
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
as.numeric(average_steps)
length(average_steps)
length(interval_factor)
interval_factor
interval_factor <- factor(interval)[1:levels]
interval_factor
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval")
summary(average_steps)
df_steps_interval <- data.frame(interval_factor, average_steps)
df_steps_interval <- df_steps_interval[order(df_steps_interval$average_steps,
df_steps_interval <- df_steps_interval[order(df_steps_interval$average_steps,
decreasing = TRUE),]
df_steps_interval
scales=list(
x=list(at = seq(0, 250, by= 50), limits = c(0, 300))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval")
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, length(time_interval), by= 50))
)
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, length(interval_factor), by= 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
x=list(at = seq(0, length(interval_factor), by= 50))
x
length(interval_factor)
288*5
1440/24
df_steps_interval <- df_steps_interval[order(df_steps_interval$average_steps,
df_steps_interval <- df_steps_interval[order(df_steps_interval$average_steps,
decreasing = TRUE),]
head(df_steps_interval)
scales=list(
x=list(at = seq(0, length(interval_factor) * 5, by= 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
# plot the time series
xyplot(as.numeric(average_steps) ~factor(interval), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
288*5
24*12
x=list(at = seq(0, length(interval_factor) * 5, by= 50))
x
scales=list(
x=list(at = seq(0, length(interval_factor) * 5, by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~interval_factor*5, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, length(interval_factor) * 5, by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~factor(interval), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
interval_factor <- factor(interval)
levels <- nlevels(interval_factor)
interval_factor <- factor(interval)[1:levels]
interval_factor
scales=list(
x=list(at = seq(0, length(interval_factor) * 5, by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~factor(interval), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
x
scales=list(
x=list(at = seq(0, length(interval_factor) * 288, by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~factor(interval), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
x
x=list(at = seq(0, length(interval_factor) * 288, by = 50))
x
xyplot(as.numeric(average_steps) ~factor(interval), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, length(interval_factor), by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, length(interval[1:288]), by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2400), by = 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2400), by = 500))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2400), by = 1000))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
interval[1:288]
interval
seq(0, 2400, 5)
seq(0, 23500, 5)
seq(0, 2355, 5)
scales=list(
x=list(at = seq(0, 2355, 5))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2355, 5))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ seq(0, 2355, 5), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
xyplot(as.numeric(average_steps) ~ seq(0, 2355, 5), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval")
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval")
seq(0, 2355, 5)
summary(interval_factor)
# plot the time series
xyplot(as.numeric(average_steps) ~ seq(0, 2355, 5), type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval")
length(seq(0, 2355, 5))
/2
length(average_steps)
length(interval_factor)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval")
scales=list(
x=list(at = seq(0, 2355, 5))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2355, 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2355, 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval_factor*5, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
288interval_factor*5
interval_factor*5
as.numeric(interval_factor)
as.numeric(interval_factor)*5
scales=list(
x=list(at = seq(0, 2355, 50))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ as.numeric(interval_factor)*5, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2355, 100))
)
scales=list(
x=list(at = seq(0, 2355, 100))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ as.numeric(interval_factor)*5, type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
288*5
summary(interval_factor)
factor(interval)
as.numeric(factor(interval))
as.numeric(factor(interval))[1:288]
as.numeric(factor(interval))[1:288]*5
interval[1:288]
scales=list(
x=list(at = seq(0, 2355, 100))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2400, 100))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
scales=list(
x=list(at = seq(0, 2400, 200))
)
# plot the time series
xyplot(as.numeric(average_steps) ~ interval[1:288], type = "l", xlab = "Time interval",
ylab = "Average steps", main = "Time series - average steps vs time interval",
scales = scales)
hist(new_total_steps, breaks = 10, xlab = "Total number of steps per day",
main = "Distribution of total steps per day after imputted values", col = "lightblue")
new_days_factor <- factor(new_steps)
# get the total number of steps for each day
new_total_steps <- tapply(new_steps, new_days_factor, FUN = sum)
# plot a histogram of the total number of steps taken each day
histogram(new_total_steps, breaks = 10, xlab = "Total number of steps per day",
main = "Distribution of total steps per day after imputted values", col = "lightblue")
new_steps <- steps
# fill in each NA value by taking the average for that time interval
for (i in which(sapply(new_steps, is.na))) {
# set the value to the equivalent value in the average vector
if (i <= 288){
new_steps[i] <- average_steps[i]
}
# wrap around 288 (avg time only has 24 hours of data) and add one because
# R is non-zero index
else{
j <- i%%288 + 1
new_steps[i] <- average_steps[j]
}
}
# create a factor vector for all of the days
new_days_factor <- factor(new_steps)
# get the total number of steps for each day
new_total_steps <- tapply(new_steps, new_days_factor, FUN = sum)
# plot a histogram of the total number of steps taken each day
histogram(new_total_steps, breaks = 10, xlab = "Total number of steps per day",
main = "Distribution of total steps per day after imputted values", col = "lightblue")
# calculate the mean and median of the distribution
mean_new <- mean(new_total_steps)
median_new <- median(new_total_steps)
hist(new_total_steps, breaks = 10, xlab = "Total number of steps per day",
main = "Distribution of total steps per day after imputted values", col = "lightblue")
hist(total_steps, breaks = 10, xlab = "Total number of steps per day", main = "Distribution of total steps per day", col = "lightblue")
length(steps[is.na(steps)])
10766/755
(mean_original / mean_new) * 100
mean_original <- mean(total_steps)
median_original <- median(total_steps)
mean_new <- mean(new_total_steps)
median_new <- median(new_total_steps)
original <- c(mean_original, median_original)
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
data.frame(original, new)
original
new_
data.frame(original, new_)
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
a <- data.frame(original, new_)
rownames(a)<-c("mean", "median")
a
install.packages("xTable")
install.packages("xtable")
a
xtable(a)
library(xtable)
xtable(a)
summary(table)
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
rownames(table)<-c("mean", "median")
print(table, type="html")
median_new
?xtable
mean_new
10766.19/755.7388
755.7388/10766.19
10766.19*.17
10766.19*.07
summary
table
sapply(table, mean)
?sapply
summary$mean
table$mean
?apply?
?apply
apply(table, 1, mean)
table
apply(table, 1, difference)
percent_diff <- function(a, b) {}
percent_diff <- function(a, b) {}
percent_diff <- function(a, b) {
b/a * 100}
apply(table, 1, percent_diff)
percent_diff <- function(a) {
a}
apply(table, 1, percent_diff)
table
755.73/10766.19
612/10765
apply(table, 1, function(x) x[2]/x[1])
apply(table, 1, function(x) x[2]/x[1] * 100)
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
result <- apply(table, 1, function(x) x[2]/x[1] * 100)
table <- data.frame(original, new_)
rownames(table)<-c("mean", "median")
table
result
table$result <- result
table
as.percent
as.percentage
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) x[2]/x[1] * 100)
table$decrease% <- result
rownames(table)<-c("mean", "median")
table
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) x[2]/x[1] * 100)
table$decrease <- result
rownames(table)<-c("mean", "median")
print(xtable(table), type="html")
```
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) x[2]/x[1] * 100)
table$decrease <- result
rownames(table)<-c("mean", "median")
table
755/10766
(755-10766)/(10766/100)
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) x[1]-x[2]/x[1] * 100)
table$decrease <- result
rownames(table)<-c("mean", "median")
table
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) (x[2]-x[1]/x[1]) * 100)
table$decrease <- result
rownames(table)<-c("mean", "median")
table
```{r, results='asis', echo = FALSE}
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) (x[2]-x[1])/x[1]) * 100)
table$decrease <- result
rownames(table)<-c("mean", "median")
table
original <- c(mean_original, median_original)
new_ <- c(mean_new, median_new)
table <- data.frame(original, new_)
result <- apply(table, 1, function(x) (x[2]-x[1])/(x[1]/100))
table$decrease <- result
rownames(table)<-c("mean", "median")
table
755/10766
755/10766 * 100
xyplot(new_steps ~ interval | dayType, data = DF, layout = c(2, 1), type = "l")
date_new <- as.Date(date)
# determine the day of the week for each date
whichDay <- weekdays(date_new)
# weekend day vector to compare with
weekendDays <- c("Saturday", "Sunday")
# construct a DF for these 4 values
DF <- data.frame(date_new, interval_factor, new_steps, whichDay)
# add a logical column to indicate whether a day ot type weekend/weekday
isWeekend <- DF$whichDay %in% weekendDays
# convert isWeekend to a factor variable
DF$dayType = factor(isWeekend,labels = c("Weekday","Weekend"))
xyplot(new_steps ~ interval | dayType, data = DF, layout = c(2, 1), type = "l")
# plot the time series
plot(DF$interval, DF$new_steps , type="l")
xyplot(new_steps ~ interval | dayType, data = DF, layout = c(2, 1), type = "l")
xyplot(new_steps ~ interval[1:288] | dayType, data = DF, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ interval[1:288] | dayType, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ interval[1:288] | DF$dayType, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ interval[1:288] | DF$dayType, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ DF$interval | DF$dayType, layout = c(2, 1), type = "l")
xyplot(new_steps ~ interval | dayType, layout = c(2, 1), type = "l")
xyplot(new_steps ~ interval | dayType, data = DF, layout = c(2, 1), type = "l")
head(DF)
class(DF$interval_factor)
xyplot(DF$new_steps ~ DF$interval | DF$dayType, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ interval[1:288] | DF$dayType, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ interval | DF$dayType, layout = c(2, 1), type = "l")
xyplot(DF$new_steps ~ interval | DF$dayType, layout = c(2, 1), type = "l", ylab = "Number of steps")
# plot the time series
xyplot(DF$new_steps ~ interval | DF$dayType, layout = c(2, 1), type = "l", xlab, "Time interval", ylab = "Number of steps", main = "Time series of numer of steps vs time interval" )
xyplot(DF$new_steps ~ interval | DF$dayType, layout = c(2, 1), type = "l", xlab = "Time interval", ylab = "Number of steps", main = "Time series of numer of steps vs time interval" )
histogram(total_steps, breaks = 10, xlab = "Total number of steps per day", main = "Distribution of total steps per day", col = "lightblue")
histogram(total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day",
col = "lightblue",
frequence = TRUE)
histogram(total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day",
col = "lightblue",
frequency = TRUE)
?histogram
histogram(total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day",
col = "lightblue",
type = "count")
histogram(total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day",
col = "lightblue",
type = "density")
histogram(total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day",
col = "lightblue",
type = "count")
histogram(new_total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day after imputted values",
col = "lightblue"
type = "count")
# plot a histogram of the total number of steps taken each day
histogram(new_total_steps, breaks = 10,
xlab = "Total number of steps per day",
main = "Distribution of total steps per day after imputted values",
col = "lightblue",
type = "count")
knit2html()
library(knity)
library(knitr)
knit2html()
knit2html(Report.rmd)
getwd()
setwd("~/GitHub/Data-Scientist-MOOC/5 - Reproducible Research/Assignment 1")
knit2html(Report.rmd)
list.files()
list.files(Report.rmd)
?knit2html()
knit2html("Report.rmd")
